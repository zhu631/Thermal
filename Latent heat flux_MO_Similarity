import itertools
import numpy as np
import math
import meteo_utils as met
import net_radiation as rad
import cv2
#from sympy import *
from sympy import Symbol
import sympy as sp
from mpmath import *
from PIL import Image
#from skimage.filters import threshold_otsu, threshold_adaptive
import numpy.ma as ma
from spectral import *
#==============================================================================
# List of constants used in MO similarity
#==============================================================================
# von Karman's constant
k = 0.4
# acceleration of gravity (m s-2)
gravity = 9.8

h = 1.47
#d_0 = 0.65*h
#ea = 18.4
H = Symbol('H')
a1 = 6.1
b1 = 2.5
a2 = 0.33
b2 = 0.41

#T_A_K = 302.05
"""
img1 = cv2.imread('20200714_f54n_thermal_splot.tif',-1)
size = np.array(img1.shape)
Zero = np.zeros((size[0], size[1]))


pix_array1 = np.array(img1)

pixel_values = np.reshape(pix_array1,(size[0], size[1]))
    
img4 = Image.fromarray(pixel_values)

img3 = np.array(img4)
img = envi.open('20200714_f54n_rgb_splot_class.hdr')
b = img[:,:,0]

d = b.reshape(size[0], size[1])
mk = 1 >= d
x = ma.array(img1)
x = ma.array(img1, mask=mk)*0.0489-61.407+0.7
    

# filling the location of plant pixels with 0
T_S = ma.filled(x,fill_value=0)
y = ma.array(img1, mask=~mk)*0.0489-61.407+0.7
T_C = ma.filled(y,fill_value=0)

T_C_NZ = T_C[np.nonzero(T_C)]

mean1 = np.mean(T_C_NZ)
std1 = np.std(T_C_NZ)
upper1 = mean1+3*std1
lower1 = mean1-3*std1
T_C[T_C > upper1] = 0
T_C[T_C < lower1] = 0

mk1 = 1 >= T_C
"""
#ustar, T_A_K, rho_a, c_p, H = map(np.asarray, (ustar, T_A_K, rho_a, c_p, H))

def calc_L(ustar, T_A_K, rho_a, c_p, H, Zero,mk1, Rn_C,Rn_S):
    '''Calculates the Monin-Obukhov length.

    Parameters
    ----------
    ustar : float
        friction velocity (m s-1).
    T_A_K : float
        air temperature (Kelvin).
    rho : float
        air density (kg m-3).
    c_p : float
        Heat capacity of air at constant pressure (J kg-1 K-1).
    H : float
        sensible heat flux (W m-2).
    LE : float
        latent heat flux (W m-2).

    Returns
    -------
    L : float
        Obukhov stability length (m).

    References
    ----------
    .. [Brutsaert2005] Brutsaert, W. (2005). Hydrology: an introduction (Vol. 61, No. 8).
        Cambridge: Cambridge University Press."Water in the low atmosphere" '''

    # Convert input scalars to numpy arrays
    ustar, T_A_K, rho_a, c_p, H = map(
        np.asarray, (ustar, T_A_K, rho_a, c_p, H))
    # first convert latent heat into rate of surface evaporation (kg m-2 s-1)
    Lambda = met.calc_lambda(T_A_K) * 1e6  # in J kg-1
    #emisGrd = 0.94  # Broadband emissivity of soil
    #emisVeg = 0.98  # Broadband emissivity of vegetation cover
    #emisSky = rad.calc_emiss_atm(ea, T_A_K)  # Atmospheric emissivity
    #Ln_C, Ln_S = rad.calc_L_n_Kustas(T_C, T_S, L_dn, LAI, emis_C, emis_S)

    #pix_array2.resize((3300,1))
    """
    img1 = cv2.imread('20200714_f54n_thermal_splot.tif',-1)
    size = np.array(img1.shape)
    Zero = np.zeros((size[0], size[1]))


    pix_array1 = np.array(img1)

    pixel_values = np.reshape(pix_array1,(size[0], size[1]))
    
    img4 = Image.fromarray(pixel_values)

    img3 = np.array(img4)
"""
    #block_size = 21
# regional thresnholding method to classify soils and plants
    #binary_adaptive1 = threshold_adaptive(img3, block_size, method='gaussian', offset=0)
    #x = ma.array(img1)

    #x = ma.array(img1, mask=binary_adaptive1)*0.0539-99.918
# filling the location of plant pixels with 0
    #T_S = ma.filled(x,fill_value=0)
# canopy left and take false out

    #y = ma.array(img1)
    """
    img = envi.open('20190813_f54n_rgb_splot_class.hdr')
    b = img[:,:,0]

    d = b.reshape(size[0], size[1])
    mk = 1 >= d
    x = ma.array(img1)
    x = ma.array(img1, mask=mk)*0.0577-128.75
    

# filling the location of plant pixels with 0
    T_C = ma.filled(x,fill_value=0)
    y = ma.array(img1, mask=~mk)*0.0577-128.75
    T_S = ma.filled(y,fill_value=0)"""
    #LAI = 3.6
    #Ln_C, Ln_S = rad.calc_L_n_Kustas(T_C, T_S, L_dn, LAI, emis_C, emis_S)
    #Ln_C, Ln_S = rad.calc_L_n_Kustas(T_C, T_S, T_A_K, LAI, emisVeg, emisGrd,emisSky, x_LAD=1,)
    # Compute Net Radiation
    #sza = 34.58
    #S_dn = 743.65
    #difvis,difnir,fvis,fnir,S_dn_dir,S_dn_dif = rad.calc_difuse_ratio(S_dn, sza, press=1013.25, SOLAR_CONSTANT=1320)
    #rho_leaf_vis = 0.15
    #tau_leaf_vis = 0.20
    #rho_leaf_nir = 0.20
    #tau_leaf_nir = 0.50
  
    #rsoilv = 0.05
    #rsoiln = 0.1
    """
    Sn_C, Sn_S = rad.calc_Sn_Campbell(LAI, sza, S_dn_dir, S_dn_dif, fvis, fnir, rho_leaf_vis,
                   tau_leaf_vis, rho_leaf_nir, tau_leaf_nir, rsoilv, rsoiln,
                   x_LAD=1, LAI_eff=None)
    """
    #Rn_S = Sn_S + Ln_S
    #Rn_C = Sn_C + Ln_C
    #Rn = Rn_S + Rn_C
    H = Symbol('H')
    #global Zero
    Hn_C = ma.array(Zero + H)
    #global mk1
    Hn_C_M = ma.array(Hn_C, mask=~mk1)
    Hn_C = ma.filled(Hn_C_M,fill_value=0)
    #global Rn_C
    LE_C = np.asarray(Rn_C - Hn_C)
    #LE_C = Rn_C - H
    #global Rn_S
    G = 0.35 * Rn_S
    Hn_S = ma.array(Zero + H)
    Hn_S_M = ma.array(Hn_S, mask=mk1)
    Hn_S = ma.filled(Hn_S_M,fill_value=0)
    LE_S = Rn_S - Hn_S - G
    #E_C = LE_C / Lambda
    #E_S = LE_S / Lambda
    LE = LE_C + LE_S
    # Virtual sensible heat flux
    Hv = H + (0.61 * T_A_K * c_p * (LE)/(Lambda))
    global L
    #L = np.asarray(np.ones(ustar.shape) * float('inf'))
    #i = Hv != 0
    L_const = np.asarray(k * gravity / T_A_K)
    L = -ustar**3 / (L_const * (Hv / (rho_a * c_p)))      #equ.2.46 L is negative usually
    
    return np.asarray(L)
#ustar, T_A_K, rho_a, c_p, H

def calc_Psi_H(zoL,T_C,size,T_A_K):
    
    # Convert input scalars to numpy array
    #zoL = (h-d_0)/L    # zoL is negative ususally
    #zoL = np.asarray(zoL)
    Psi_H1 = []
    #img1 = cv2.imread('20200714_f54n_thermal_splot.tif',-1)
    #size = np.array(img1.shape)
    w = -zoL
    c = 0.33
    d1 = 0.057
    n = 0.78
    arg = (c +w**n) / c
    #global T_C
    #global size
    for i in range(len(zoL)):               #i = len(T_C) # number of row    
        for m in range(len(zoL[0])):
                        
            if T_C[i,m] > T_A_K:
            
                #Psi_H_I = ((1.0 - d1) / n) * sp.log(arg[i,m])
                Psi_H_I = 5.624*w[i,m]+0.0449
            else:
            #Psi_H_I = -a * sp.log(zoL[i,m]+(1+zoL[i,m]**b)**(1/b))
                Psi_H_I =  -5*(zoL[i,m])
            #Psi_H_I = -5*sp.log(zoL[i,m])
            Psi_H1.append(Psi_H_I)
    
            """2.4☻
            Psi_H_I =  -5*(zoL[i,m])
    
            Psi_H1.append(Psi_H_I) """
    
    
    
    
    Psi_H = np.reshape(Psi_H1,(size[0], size[1]))
    #Psi_H = -a * sp.log(zoL+(1+zoL**b)**(1/b))
    return np.asarray(Psi_H)

    ''' Calculates the adiabatic correction factor for heat transport.

    Parameters
    ----------
    zoL : float
        stability coefficient (unitless).

    Returns
    -------
    Psi_H : float
        adiabatic corrector factor fof heat transport (unitless).

    References
    ----------
    .. [Brutsaert2005] Brutsaert, W. (2005). Hydrology: an introduction (Vol. 61, No. 8).
        Cambridge: Cambridge University Press.
    '''
    # for stable and netural (zoL = 0 -> Psi_H = 0) conditions
    #i = zoL >= 0.0
    #a = 6.1
    #b = 2.5
    #Psi_H[i] = -a * np.log(zoL[i] + (1.0 + zoL[i]**b)**(1. / b))
    # for unstable conditions
    #i = zoL < 0.0 


def calc_Psi_M(zoL,T_C,size,T_A_K):
    
    a = 0.33
    b = 0.41
    
    # Convert input scalars to numpy array
    #zoL = np.asarray(zoL)
    #zoL = (h-d_0)/L
    
    w = -zoL

    #x = np.asarray((y / a)**(1/3))
    Psi_0 = -sp.log(a) + 3**0.5 * b * a**(1/3) * np.pi / 6.0
    
    #arct_input = (2.0 * (y / a)**(1/3) - 1.0) / 3**0.5
    #input1 = a+y
    #input2 = (1.0 + (y / a)**(1/3))**2 / (1.0 - (y / a)**(1/3) + (y / a)**(1/3)**2)
    Psi_M1 = []
    #img1 = cv2.imread(name2[i],-1)
    #size = np.array(img1.shape)
    #global T_C
    #global size
    for i in range(len(w)):               #i = len(T_C) # number of row    
        for m in range(len(w[0])):
            if T_C[i,m] > T_A_K: 
    #for i, m in itertools.product (range(len(y)),range(len(y[0]))):
                #Psi_M2 = (sp.log(a+w[i,m]) - 3.0 * b * w[i,m]**(1/3) 
                #+(b * a**(1/3)) / 2.0 * sp.log((1.0 + (w[i,m] / a)**(1/3))**2 / (1.0 - (w[i,m] / a)**(1/3) + ((w[i,m] / a)**(1/3))**2)) 
                #+3.0**0.5 * b * a**(1/3) * sp.atan((2*(w[i,m] / a)**(1/3)-1)/(3**0.5))+Psi_0)          
            #Psi_M2 = -a * sp.log(zoL[i,m]+(1+zoL[i,m]**b)**(1/b))
                Psi_M2 = 2.486*(w[i,m])+0.0036
                #Psi_M2 = 1.8
            
            else:
            
                Psi_M2 = -5*(zoL[i,m])
                 # value acquired from Figure 2.14
            Psi_M1.append(Psi_M2)
    Psi_M = np.reshape(Psi_M1,(size[0], size[1]))   
    #return np.asarray(Psi_M)
    #for i, m, f in zip (input1,input2,arct_input):
        #Psi_M1 = (sp.log(i) - 3.0 * b * y**(1/3) +(b * a**(1/3)) / 2.0 * sp.log(m) +3.0**0.5 * b * a**(1/3) * (math.pi/4*f +f*(0.186982-0.191942*f**2))+Psi_0)          
        #Psi_M.append(Psi_M1)◘
    #Psi_M = -a * sp.log(zoL+(1+zoL**b)**(1/b))
    return np.asarray(Psi_M)
        
#Psi_M = np.zeros(zoL.shape)
    # for stable and netural (zoL = 0 -> Psi_M = 0) conditions
    #i = zoL >= 0.0    
    #a = 6.1
    #b = 2.5    
    #Psi_M[i] = -a * np.log(zoL[i] + (1.0 + zoL[i]**b)**(1.0 / b))
    # for unstable conditions
    #i = zoL < 0
    ''' Adiabatic correction factor for momentum transport.

    Parameters
    ----------
    zoL : float
        stability coefficient (unitless).

    Returns
    -------
    Psi_M : float
        adiabatic corrector factor fof momentum transport (unitless).

    References
    ----------
    .. [Brutsaert2005] Brutsaert, W. (2005). Hydrology: an introduction (Vol. 61, No. 8).
        Cambridge: Cambridge University Press.
    '''
        # Use b**(-3) for testing 
    #y = b**-3 #np.minimum(y, b**-3) 
    
    """Approximation method for atan((2.0 * x - 1.0) / 3**0.5) = math.pi/4*arct_input +arct_input*(0.186982-0.191942*arct_input**2) 
    The original equation: Psi_M[i] = (np.log(a + y) - 3.0 * b * y**0.333333 +
                (b * a**0.333333) / 2.0 * np.log((1.0 + x)**2 / (1.0 - x + x**2)) +
                3.0**0.5 * b * a**0.333333 * np.arctan((2.0 * x - 1.0) / 3**0.5) +
                Psi_0)"""

def calc_richardson(u, z_u, d_0, T_R0, T_R1, T_A0, T_A1):
    '''Richardson number.

    Estimates the Bulk Richardson number for turbulence using
    time difference temperatures.

    Parameters
    ----------
    u : float
        Wind speed (m s-1).
    z_u : float
        Wind speed measurement height (m).
    d_0 : float
        Zero-plane displacement height (m).
    T_R0 : float
        radiometric surface temperature at time 0 (K).
    T_R1 : float
        radiometric surface temperature at time 1 (K).
    T_A0 : float
        air temperature at time 0 (K).
    T_A1 : float
        air temperature at time 1 (K).

    Returns
    -------
    Ri : float
        Richardson number.

    References
    ----------
    .. [Norman2000] Norman, J. M., W. P. Kustas, J. H. Prueger, and G. R. Diak (2000),
        Surface flux estimation using radiometric temperature: A dual-temperature-difference
        method to minimize measurement errors, Water Resour. Res., 36(8), 2263-2274,
        http://dx.doi.org/10.1029/2000WR900033.
    '''

    # See eq (2) from Louis 1979
    Ri = -(gravity * (z_u - d_0) / T_A1) * \
          (((T_R1 - T_R0) - (T_A1 - T_A0)) / u**2) # equation (12) [Norman2000]
    return np.asarray(Ri)

def calc_u_star(u, z_u, d_0, z_0):
    '''Friction velocity.

    Parameters
    ----------
    u : float
        wind speed above the surface (m s-1).
    z_u : float
        wind speed measurement height (m).
    d_0 : float
        zero-plane displacement height (m).
    z_0 : float
        aerodynamic roughness length for momentum transport (m). Table 2.6 from reference

    References
    ----------
    .. [Brutsaert2005] Brutsaert, W. (2005). Hydrology: an introduction (Vol. 61, No. 8).
        Cambridge: Cambridge University Press.
    '''

    # Covert input scalars to numpy arrays
    z_u = 3
    u, z_u, d_0, z_0 = map(np.asarray, (u, z_u, d_0, z_0))
    
    # calculate correction factors in other conditions

    ustar = u * k / (np.log((z_u - d_0) / z_0)) # only when h >5.33m that u_star could be negative
    return np.asarray(ustar)
